<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="Default.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-toc-path="Use Cases" data-mc-conditions="Danube.iOS">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" type="text/css" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Print.css" rel="stylesheet" type="text/css" data-mc-generated="True" /><title>
			Application commands
		</title>
        <link href="../Resources/Stylesheets/DocLoc.css" rel="stylesheet" type="text/css" />
        <script src="../../Resources/Scripts/jquery.min.js" type="text/javascript">
        </script>
        <script src="../../Resources/Scripts/purify.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/require.config.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js" type="text/javascript" defer="defer">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js" type="text/javascript" defer="defer">
        </script>
    </head>
    <body>
        <h1><a name="kanchor28"></a>Application commands</h1>
        <p>Each <a href="../Concepts/DANUBE_APPLICATION_COMMANDS.htm">application command</a> is associated with one command set. A command set is associated with one or more VUI forms. A VUI form can have more than one command set associated with it. </p>
        <h2>Prerequisites</h2>
        <p>You've <a href="DANUBE_SPEECH_ENABLE_IOS.htm">speech-enabled your app</a>.</p>
        <h2>Procedure</h2>
        <p>To define application commands, do the following:</p>
        <ol>
            <li value="1">
                <p>Create a command set by instantiating the <code>NUSACommandSet</code> class:</p>
                <p><code>NUSACommandSet* testCommandSet = [[NUSACommandSet alloc] initWithName:@"My Test CommandSet" description:@"Description of my test command set"];</code> </p>
                <p class="compact"><code>My Test CommandSet</code> - a human-readable title for your command set; displayed on the personalization &amp; help screen.</p>
                <p><code>Description of my test command set</code> - a human-readable description; displayed on the personalization &amp; help screen.</p>
            </li>
            <li value="2">
                <p>Create application commands in the command set:</p>
                <p><code>[testCommandSet createCommand:@"myTestCommand"  phrase:@"this is a test" displayString:@"THIS&#160;IS&#160;A&#160;TEST" description:@"My test command description."];</code> </p>
                <p><code>myTestCommand</code> - the unique identifier of the application command; this is the identifier that your app will receive in the application command delegate message when it's recognized. </p>
                <p class="warning"><span class="important">Important:</span>&#160;Make sure the application command ID doesn't contain spaces and doesn't start with a number.</p>
                <p class="compact"><code>this is a test</code> - the application command phrase; displayed on the personalization &amp; help screen if no display string is set.</p>
                <p class="compact"><code>THIS&#160;IS&#160;A&#160;TEST</code> - the application command display string; displayed on the personalization &amp; help screen. If you don't want to set a display string, specify nil or an empty string.</p>
                <p><code>My test command description</code> - a human-readable description; displayed on the personalization &amp; help screen.</p>
            </li>
            <li value="3">
                <p>Associate your form's <code>NUSAVuiController</code> object with the command set:</p>
                <p><code>[theVuiController assignCommandSets [NSArray arrayWithObjects:testCommandSet, nil]];</code> </p>
                <p><b>Note:</b>&#160;<code>assignCommandSets</code> replaces your application commands;&#160;it doesn't append commands to an existing set or append additional sets. Define all your application commands and command sets and then call <code>AssignCommandSets</code> only once.</p>
            </li>
        </ol>
        <h3>Standard placeholders</h3>
        <p>Standard placeholders are delivered with <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span>. To add a standard placeholder to an application command, add its identifier to the phrase of the command:</p>
        <p><code>[testCommandSet createCommand:@"myScrollCommand" phrase:@"scroll down &lt;standard:cardinal0-100&gt; pages" displayString:@"scroll down &lt;standard:cardinal0-100&gt; pages" description:@"Scrolls down the specified number of pages."];</code><![CDATA[  ]]></p>
        <p>For a list of standard placeholders, see: <a href="../Concepts/DANUBE_APPLICATION_COMMANDS.htm#StandardPlaceholders">Standard placeholders</a>.</p>
        <p class="note"><b>Note:</b> If you use a display string, the placeholder in the display string and in the phrase must be the same (see: <a href="../Concepts/DANUBE_APPLICATION_COMMANDS.htm#Recommen">Recommendations for phrases</a>).</p>
        <h3>App-defined placeholders</h3>
        <p>When designing the VUI for your app, you can provide one or more commands.  For example, you can define voice commands that refer to a patient name: <span class="command">show allergies for mister Pink</span> or <span class="command">create new note for mister Orange</span>. To do this, you can create an app-defined placeholder and add it to application commands as needed. Proceed as follows:</p>
        <ol>
            <li value="1">
                <p>Create an application command with a placeholder defined in angled brackets for the phrase parameter:</p>
                <p><code>[testCommandSet createCommand:@"myShowPatientCommand" phrase:@"show me &lt;patient&gt;" displayString:@"show me &lt;patient&gt;" description:@"Shows data for the corresponding patient."];</code>
                </p>
                <p><code>&lt;patient&gt;</code> is the unique identifier of the placeholder.</p>
                <p class="note"><b>Note:</b> The same placeholder can be used in different commands.</p>
            </li>
            <li value="2">
                <p>Create the placeholder as an object of the <code>NUSACommandPlaceholder</code> class:</p>
                <p><code>NUSACommandPlaceholder* patientCommandPlaceholder = [[NUSACommandPlaceholder alloc] initWithID:@"patient" description:@"Name of the patient"];</code> </p>
                <p class="compact"><code>patient</code> - the unique identifier of the placeholder that's used in application command phrases; must not contain spaces and/or numbers.</p>
                <p><code>Name of the patient</code> - a human-readable description; displayed on the personalization &amp; help screen.</p>
            </li>
            <li value="3">
                <p>Set its phrases and values: </p>
                <p><code>[patientCommandPlaceholder setValues:[NSArray arrayWithObjects:@"PTN.48389488", @"PTN.48323466", nil] withSpokenForms: [NSArray arrayWithObjects:@"Mr. Pink", @"Mr. Orange", nil]];</code> </p>
                <p class="compact"><code>"PTN.48389488", "PTN.48323466"</code> - an array of strings containing the values of the placeholder. </p>
                <p><code>"Mr. Pink", "Mr. Orange"</code> - an array of strings containing the corresponding spoken forms. </p>
                <p>The number of elements in the two arrays must be the same. In this example, the "patient" placeholder can have two values, PTN.48389488 if the user says <span class="command">mister Pink</span> or PTN.48323466 if the user says <span class="command">mister Orange</span>.</p>
                <p>To define multiple spoken forms for a single value, separate them with the pipe character: <b>|</b>.</p>
                <p class="note"><b>Note:</b> If you use a display string, the placeholder in the display string and in the phrase must be the same. The value of a placeholder can be changed. The new value will become active after the next <code>synchronizeWithView</code> call.</p>
            </li>
            <li value="4">
                <p>Associate your form's <code>NUSAVuiController</code> object with the command placeholder:</p>
                <p><code>[theVuiController assignCommandPlaceholders:[NSArray arrayWithObjects: patientCommandPlaceholder, nil]];</code>
                </p>
            </li>
        </ol>
        <h3>Recognizing application commands</h3>
        <p><span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> notifies your app about recognized application commands; the <code>vuiControllerDidRecognizeCommand:spokenPhrase:withContent:placeholderValues:</code> message is sent. For your app to receive this message, do the following:</p>
        <ol>
            <li value="1">
                <p>Have your view controller class adopt the <code>NUSAVuiControllerDelegate</code> protocol. Set the delegate property of the <code>NUSAVuiController</code> instance to your class object. Make sure to remove your class object as the delegate at the end of its life cycle. For more information, see: <a href="DANUBE_EVENTS_IOS.htm">VuiController events</a>.</p>
                <p class="compact2"><code>@interface MySpeechEnabledView : UIViewController &lt;NUSAVuiControllerDelegate&gt;</code> </p>
                <p class="compact2"><code>…</code> </p>
                <p class="compact2"><code>- (void) viewWillAppear:(BOOL)animated {</code> </p>
                <p class="compact3"><code>[vuiController setDelegate:self];</code> </p>
                <p class="compact2"><code>…</code> </p>
                <p class="compact2"><code>}</code> </p>
            </li>
            <li value="2">
                <p>In the <code>vuiControllerDidRecognizeCommand:spokenPhrase:withContent:placeholderValues:</code> callback method, check for the ID of the recognized application command.</p>
                <p class="compact2"><code>- (void) vuiControllerDidRecognizeCommand: (NSString *) id spokenPhrase: (NSString *) spokenPhrase withContent: (NSString *) content placeholderValues: (NSDictionary *) placeholderValues {</code>
                </p>
                <p class="compact3"><code>if ([id isEqualToString:@"myShowPatientCommand"]) {</code>
                </p>
            </li>
            <li value="3">
                <p>Process the recognized placeholder values.</p>
                <p class="compact4"><code>NSString* patientName = [placeholderValues objectForKey:@"patient"];</code>
                </p>
                <p class="compact4"><code>// Perform the processing in response to the recognized application command…</code>
                </p>
                <p class="compact3"><code>}</code>
                </p>
            </li>
        </ol>
        <p class="note"><b>Note:</b> The procedure above also applies for commands with standard placeholders. Standard placeholders delivered with <span class="mc-variable DocLoc.DM_SK variable">Dragon Medical SpeechKit</span> have predefined keys, for more information, see: <a href="../Concepts/DANUBE_APPLICATION_COMMANDS.htm#StandardPlaceholders">Standard placeholders</a>.</p>
        <h2>Remarks</h2>
        <ul>
            <li>Commands can have multiple phrases; call the <code>createCommand</code> method multiple times for the same ID, passing the phrases you want defined for the application command.</li>
            <li>Your app is notified when an application command is recognized via a <code>NUSAVuiController</code> <a href="DANUBE_EVENTS_IOS.htm">delegate message</a>.</li>
            <li>To enable/disable a command set, set the <code>isEnabled</code> property. To query the enabled/disabled state of a command set query the value of the <code>isEnabled</code> property.</li>
            <li>To enable/disable individual commands in a command set, call the <code>setCommand:enabled:</code> method with the corresponding command ID.</li>
            <li>If your app wants to modify attributes of application commands or command sets (for example, add new application commands, enable/disable application commands or change placeholder values after the end user has already used speech recognition), your app must apply the changes to the attributes by calling the <code>synchronizeWithView</code> method on the VuiController. It's best practice to do all changes before applying them via <code>synchronizeWithView</code>.</li>
            <li>You can speech-enable your app UI even if no speech-enabled controls are active.</li>
            <li>To change the placeholder in an application command, use the <code>clearValues</code> method. Once the placeholder is empty, you can add new phrases and values to the placeholder.</li>
            <li>Application commands are also available in custom views (enabled using the <code>NUSACustomVuiController</code>). To use application commands with the custom vuiController, the same steps must be followed as for the <code>NUSAVuiController</code>.</li>
        </ul>
        <h3>See also</h3>
        <p class="indent2"><a href="../Concepts/DANUBE_VOICE_COMMANDS.htm">Voice commands</a>
        </p>
    </body>
</html>